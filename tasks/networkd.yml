---

- name: "Networkd: Link: physical interfaces"
  template:
    src: "networkd.link.j2"
    dest: "/etc/systemd/network/10-{{ interface.name }}.link"
  vars:
    interface: "{{ item }}"
    config: "{{ item }}"
    defaultmtu: 1500
  with_items: "{{ network_interfaces }}"
  when: network_interfaces is defined
  notify: network_restart

- name: "Networkd: Link: underlay physical interfaces"
  template:
    src: "networkd.link.j2"
    dest: "/etc/systemd/network/10-{{ interface.name }}.link"
  vars:
    interface: "{{ item }}"
    config: "{{ item }}"
    defaultmtu: 9100
  with_items: "{{ network_underlay_interfaces | selectattr('is_phy', 'equalto', true) | list }}"
  when: network_underlay_interfaces is defined
  notify: network_restart

- name: "Networkd: Link: bridge physical interfaces"
  template:
    src: "networkd.link.j2"
    dest: "/etc/systemd/network/10-{{ interface.name }}.link"
  vars:
    interface: "{{ item.interface }}"
    config: "{{ item.config }}"
    defaultmtu: "{{ item.config.mtu|default(9000) }}"
  loop: >-
      {%- set items = [] %}
      {%- for bridge in network_bridges %}
      {%-   for interface in bridge.interfaces|default([]) %}
      {%-     if interface.is_phy %}
      {%-       do items.append({ 'interface': interface, 'config': bridge }) %}
      {%-     endif %}
      {%-   endfor %}
      {%- endfor %}
      {{- items -}}
  when: network_bridges is defined
  notify: network_restart

- name: "Networkd: Link: bond physical interfaces"
  template:
    src: "networkd.link.j2"
    dest: "/etc/systemd/network/10-{{ interface.name }}.link"
  vars:
    interface: "{{ item.interface }}"
    config: "{{ item.config }}"
    defaultmtu: "{{ item.config.mtu|default(9000) }}"
    is_bond: true
  loop: >-
      {%- set items = [] %}
      {%- for bond in network_bonds %}
      {%-   for interface in bond.interfaces %}
      {%-     if interface.is_phy %}
      {%-       do items.append({ 'interface': interface, 'config': bond }) %}
      {%-     endif %}
      {%-   endfor %}
      {%- endfor %}
      {{- items -}}
  when: network_bonds is defined
  notify: network_restart

- name: "Networkd: NetDev: bonds"
  template:
    src: "networkd.netdev.bond.j2"
    dest: "/etc/systemd/network/20-bond-{{ config.name }}.netdev"
  vars:
    config: "{{ item }}"
  loop: "{{ network_bonds }}"
  when: network_bonds is defined
  notify: network_restart

- name: "Networkd: NetDev: bridges"
  template:
    src: "networkd.netdev.bridge.j2"
    dest: "/etc/systemd/network/30-bridge-{{ config.name }}.netdev"
  vars:
    config: "{{ item }}"
  loop: "{{ network_bridges }}"
  when: network_bridges is defined
  notify: network_restart

- name: "Networkd: NetDev: vlan"
  template:
    src: "networkd.netdev.vlan.j2"
    dest: "/etc/systemd/network/40-vlan{{config.vlan}}-{{ config.name }}-attachedto-{{ config.ifname }}.netdev"
  vars:
    config: "{{ item }}"
  loop: "{{ network_vlans }}"
  when: network_vlans is defined
  notify: network_restart

- name: "Networkd: NetDev: vxlan0"
  template:
    src: "networkd.netdev.vxlan0.j2"
    dest: "/etc/systemd/network/30-vxlan0.netdev"
  when: vxlan_vlan_bridge
  notify: network_restart

- name: "Networkd: Network: vxlan0"
  template:
    src: "networkd.network.vxlan0.j2"
    dest: "/etc/systemd/network/40-vxlan0.network"
  when: vxlan_vlan_bridge
  notify: network_restart

- name: "Networkd: NetDev: vxlan"
  template:
    src: "networkd.netdev.vxlan.j2"
    dest: "/etc/systemd/network/40-vxlan{{ config.vni }}.netdev"
  vars:
    config: "{{ item }}"
  loop: "{{ network_vxlans }}"
  when: network_vxlans is defined
  notify: network_restart

- name: "Networkd: Network: lo vtep ip"
  template:
    src: "networkd.network.lo.j2"
    dest: "/etc/systemd/network/10-lo.network"
  when: network_vtep_ip is defined
  notify: network_restart

- name: "Networkd: Network: vxlan"
  template:
    src: "networkd.network.vxlan.j2"
    dest: "/etc/systemd/network/50-vxlan{{ config.vni }}{{ '-vlan' ~ config.vlan if config.vlan is defined else '' }}-attachedto-{{ config.ifname }}.network"
  vars:
    config: "{{ item }}"
  loop: "{{ network_vxlans }}"
  when: network_vxlans is defined
  notify: network_restart

- name: "Networkd: Network: eth"
  template:
    src: "networkd.network.j2"
    dest: "/etc/systemd/network/10-eth-{{ config.name }}.network"
  vars:
    config: "{{ item }}"
    type: "eth"
  loop: "{{ network_interfaces }}"
  when: network_interfaces is defined and (item.name not in network_bridge_iface_names or item.addresses|default([])|count > 0 or item.dhcp|default(false))
  notify: network_restart

- name: "Networkd: Network: underlay"
  template:
    src: "networkd.network.underlay.j2"
    dest: "/etc/systemd/network/10-underlay-{{ interface.name }}.network"
  vars:
    interface: "{{ item }}"
  loop: >-
      {%- set items = [] %}
      {%- for interface in network_underlay_interfaces %}
      {%-   if interface.name not in network_bond_names + network_bridge_names + network_vlan_names %}
      {%-     do items.append(interface) %}
      {%-   endif %}
      {%- endfor %}
      {{- items -}}
  when: network_underlay_interfaces is defined
  notify: network_restart

- name: "Networkd: Network: bond iface"
  template:
    src: "networkd.network.bond_iface.j2"
    dest: "/etc/systemd/network/40-bond-{{ config.name }}-{{ interface.name }}.network"
  vars:
    config: "{{ item.config }}"
    interface: "{{ item.interface }}"
  loop: >-
      {%- set items = [] %}
      {%- for bond in network_bonds %}
      {%-   for interface in bond.interfaces %}
      {%-     do items.append({ 'interface': interface, 'config': bond }) %}
      {%-   endfor %}
      {%- endfor %}
      {{- items -}}
  when: network_bonds is defined
  notify: network_restart

- name: "Networkd: Network: bridge iface"
  template:
    src: "networkd.network.bridge_iface.j2"
    dest: "/etc/systemd/network/50-{{ interface.name }}-attachedto-{{ config.name }}.network"
  vars:
    config: "{{ item.config }}"
    interface: "{{ item.interface }}"
  loop: >-
      {%- set items = [] %}
      {%- for bridge in network_bridges %}
      {%-   for interface in bridge.interfaces|default([]) %}
      {%-     do items.append({ 'interface': interface, 'config': bridge }) %}
      {%-   endfor %}
      {%- endfor %}
      {{- items -}}
  when: network_bridges is defined
  notify: network_restart

- name: "Networkd: Network: vlans"
  template:
    src: "networkd.network.j2"
    dest: "/etc/systemd/network/60-vlan{{config.vlan}}-{{ config.name }}-attachedto-{{ config.ifname }}.network"
  vars:
    config: "{{ item }}"
    type: "vlan"
  loop: "{{ network_vlans }}"
  when: network_vlans is defined and item.name not in network_bridge_iface_names
  notify: network_restart

- name: "Networkd: Network: bonds"
  template:
    src: "networkd.network.j2"
    dest: "/etc/systemd/network/60-bond-{{ config.name }}.network"
  vars:
    config: "{{ item }}"
    type: "bond"
  loop: "{{ network_bonds }}"
  when: network_bonds is defined and (item.name not in network_bridge_iface_names or item.addresses|default([])|count > 0 or item.dhcp|default(false))
  notify: network_restart

- name: "Networkd: Network: bridge"
  template:
    src: "networkd.network.j2"
    dest: "/etc/systemd/network/60-bridge-{{ config.name }}.network"
  vars:
    config: "{{ item }}"
    type: "bridge"
  loop: "{{ network_bridges }}"
  when: network_bridges is defined
  notify: network_restart

- name: "Make sure /etc/networkd-dispatcher/configuring.d/ exists"
  file:
    path: /etc/networkd-dispatcher/configuring.d/
    state: directory
    mode: "755"

- name: "Create pre-up hooks for setting port configuration"
  template:
    src: pre-up-hooks.j2
    dest: /etc/networkd-dispatcher/configuring.d/50-pre-up.sh
    mode: "755"
  register: networkd

- name: "Ensure networkd-dispatcher is started"
  service:
    name: networkd-dispatcher
    state: started
    enabled: true

- name: "Instruct networkd not to mess with our routes"
  community.general.ini_file:
    path: /etc/systemd/networkd.conf
    no_extra_spaces: true
    section: "{{ item.section }}"
    option: "{{ item.key }}"
    value: "{{ item.val }}"
  with_items:
    - section: "Network"
      key: "KeepConfiguration"
      val: "yes"
    - section: "Network"
      key: "ManageForeignNextHops"
      val: "no"
    - section: "Network"
      key: "ManageForeignRoutes"
      val: "no"
    - section: "Network"
      key: "ManageForeignRoutingPolicyRules"
      val: "no"
  notify: network_restart
