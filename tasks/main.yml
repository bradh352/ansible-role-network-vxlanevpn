---

- name: "APT: Install required packages"
  ansible.builtin.apt:
    pkg:
      - netplan.io
      - networkd-dispatcher
      - frr
      - ufw
      - bridge-utils
    state: present

########## FRR Fixes
# FRR 8.4.4 in Ubuntu 24.04 has an issue resolved by https://github.com/FRRouting/frr/pull/12524
- name: "Check installed FRR version"
  shell: "dpkg -l frr | grep ii | awk '{ print $3 }'"
  changed_when: false
  register: frr_version
  when: ansible_distribution == "Ubuntu"

- name: "Download patched FRR"
  ansible.builtin.get_url:
    url: https://bradhouse.dev/wp-content/uploads/2025/06/frr_8.4.4-1.99deb12u1_amd64.deb
    dest: /tmp/frr_8.4.4-1.99~deb12u1_amd64.deb
    mode: "600"
  become: false
  delegate_to: localhost
  when: hostvars[item]['frr_version'].stdout|default("") == '8.4.4-1.1ubuntu6.3'
  with_items: "{{ play_hosts }}"
  run_once: true

- name: "Send patched FRR to remote"
  copy:
    src: /tmp/frr_8.4.4-1.99~deb12u1_amd64.deb
    dest: /tmp/frr_8.4.4-1.99~deb12u1_amd64.deb
    mode: "600"
  when: frr_version.stdout|default("") == "8.4.4-1.1ubuntu6.3"

- name: "Install patched FRR"
  shell: "dpkg -i /tmp/frr_8.4.4-1.99~deb12u1_amd64.deb"
  when: frr_version.stdout|default("") == "8.4.4-1.1ubuntu6.3"
  notify: frr_restart

- name: "Cleanup download"
  file:
    path: /tmp/frr_8.4.4-1.99~deb12u1_amd64.deb
    state: absent
  delegate_to: localhost
  become: false
  when: frr_version.stdout|default("") == "8.4.4-1.1ubuntu6.3"


##########

- name: "APT: Purge undesired packages"
  ansible.builtin.apt:
    pkg:
      - ifupdown
      - ifupdown2
      - ifupdown-ng
    purge: true
    state: absent

- name: "FRR: enable bgp and bfd"
  lineinfile:
     path: /etc/frr/daemons
     regexp: "^{{ item.key }}=.*"
     line: "{{ item.key }}={{ item.val }}"
     state: present
  with_items:
    - key: "bgpd"
      val: "yes"
    - key: "bfdd"
      val: "yes"
  notify: frr_restart

# Flush handlers as frr_restart can interrupt.
- name: "Flush handlers"
  ansible.builtin.meta: flush_handlers

- name: "Validate configuration"
  set_fact:
    validate_interfaces: "{{ lookup('template', 'validate_config.j2') }}"

- name: "Cache bond names"
  set_fact:
    network_bond_names: "{{ network_bonds|default([]) | map(attribute='name') | list }}"

- name: "Networkd: Link: ethernet interfaces"
  template:
    src: "networkd.link.j2"
    dest: "/etc/systemd/network/10-eth-{{ interface.name|default(interface.ifname) }}.link"
  vars:
    interface: "{{ item }}"
    config: "{{ item }}"
    defaultmtu: 1500
  with_items: "{{ network_interfaces }}"
  when: network_interfaces is defined

- name: "Networkd: Link: underlay interfaces"
  template:
    src: "networkd.link.j2"
    dest: "/etc/systemd/network/10-underlay-iface{{ index }}.link"
  vars:
    interface: "{{ item }}"
    config: "{{ item }}"
    defaultmtu: 9100
  loop: "{{ network_underlay_interfaces }}"
  loop_control:
    index_var: index
  when: network_underlay_interfaces is defined

- name: "Networkd: Link: bridge interfaces"
  template:
    src: "networkd.link.j2"
    dest: "/etc/systemd/network/10-bridge-{{ config.name }}-{{ interface.ifname if interface.ifname is defined else 'iface' ~ index }}.link"
  vars:
    interface: "{{ item.interface }}"
    config: "{{ item.config }}"
    index: "{{ item.iface_index }}"
    defaultmtu: "{{ item.config.mtu|default(9000) }}"
  loop: >-
      {%- set items = [] %}
      {%- for bridge in network_bridges %}
      {%-   for interface in bridge.interfaces|default([]) %}
      {%-     if interface.ifname|default("") not in network_bond_names %}
      {%-       do items.append({ 'interface': interface, 'config': bridge, 'iface_index': loop.index0 }) %}
      {%-     endif %}
      {%-   endfor %}
      {%- endfor %}
      {{- items -}}
  when: network_bridges is defined

- name: "Networkd: Link: bond interfaces"
  template:
    src: "networkd.link.j2"
    dest: "/etc/systemd/network/10-bond-{{ config.name }}-iface{{ index }}.link"
  vars:
    interface: "{{ item.interface }}"
    config: "{{ item.config }}"
    index: "{{ item.iface_index }}"
    defaultmtu: "{{ item.config.mtu|default(9000) }}"
  loop: >-
      {%- set items = [] %}
      {%- for bond in network_bonds %}
      {%-   for interface in bond.interfaces %}
      {%-     do items.append({ 'interface': interface, 'config': bond, 'iface_index': loop.index0 }) %}
      {%-   endfor %}
      {%- endfor %}
      {{- items -}}
  when: network_bonds is defined

- name: "Networkd: Netdev: VTEP interface"
  template:
    src: "networkd.netdev.vtep.j2"
    dest: "/etc/systemd/network/10-vtep.netdev"
  when: network_vtep_ip is defined

- name: "Networkd: NetDev: bonds"
  template:
    src: "networkd.netdev.bond.j2"
    dest: "/etc/systemd/network/20-bond-{{ config.name }}.netdev"
  vars:
    config: "{{ item }}"
  loop: "{{ network_bonds }}"
  when: network_bonds is defined

- name: "Networkd: NetDev: bridges"
  template:
    src: "networkd.netdev.bridge.j2"
    dest: "/etc/systemd/network/30-bridge-{{ config.name }}.netdev"
  vars:
    config: "{{ item }}"
  loop: "{{ network_bridges }}"
  when: network_bridges is defined

- name: "Networkd: NetDev: vlan"
  template:
    src: "networkd.netdev.vlan.j2"
    dest: "/etc/systemd/network/40-bridge-{{ config.bridge }}-vlan{{config.vlan}}-{{ config.name }}.netdev"
  vars:
    config: "{{ item }}"
  loop: "{{ network_vlans }}"
  when: network_vlans is defined

- name: "Networkd: NetDev: vxlan"
  template:
    src: "networkd.netdev.vxlan.j2"
    dest: "/etc/systemd/network/40-vxlan{{ config.vni }}.netdev"
  vars:
    config: "{{ item }}"
  loop: "{{ network_vxlan_interfaces }}"
  when: network_vxlan_interfaces is defined

- name: "Networkd: Network: vtep"
  template:
    src: "networkd.network.vtep.j2"
    dest: "/etc/systemd/network/10-vtep.network"
  when: network_vtep_ip is defined

- name: "Networkd: Network: vxlan"
  template:
    src: "networkd.network.vxlan.j2"
    dest: "/etc/systemd/network/50-bridge-{{ config.bridge }}-vxlan{{ config.vni }}{{ '-vlan' ~ config.vlan if config.vlan is defined else '' }}.network"
  vars:
    config: "{{ item }}"
  loop: "{{ network_vxlan_interfaces }}"
  when: network_vxlan_interfaces is defined

- name: "Networkd: Network: eth"
  template:
    src: "networkd.network.j2"
    dest: "/etc/systemd/network/10-eth-{{ config.name|default(config.ifname) }}.network"
  vars:
    config: "{{ item }}"
    type: "eth"
  loop: "{{ network_interfaces }}"
  when: network_interfaces is defined

- name: "Networkd: Network: underlay"
  template:
    src: "networkd.network.underlay.j2"
    dest: "/etc/systemd/network/10-underlay-iface{{ index }}.network"
  vars:
    config: "{{ item }}"
    interface: "{{ item }}"
  loop: "{{ network_underlay_interfaces }}"
  loop_control:
    index_var: index
  when: network_underlay_interfaces is defined

- name: "Networkd: Network: bond iface"
  template:
    src: "networkd.network.bond_iface.j2"
    dest: "/etc/systemd/network/40-bond-{{ config.name }}-iface{{ index }}.network"
  vars:
    config: "{{ item.config }}"
    interface: "{{ item.interface }}"
    index: "{{ item.iface_index }}"
  loop: >-
      {%- set items = [] %}
      {%- for bond in network_bonds %}
      {%-   for interface in bond.interfaces %}
      {%-     do items.append({ 'interface': interface, 'config': bond, 'iface_index': loop.index0 }) %}
      {%-   endfor %}
      {%- endfor %}
      {{- items -}}
  when: network_bonds is defined

- name: "Networkd: Network: bridge iface"
  template:
    src: "networkd.network.bridge_iface.j2"
    dest: "/etc/systemd/network/50-bridge-{{ config.name }}-{{ interface.ifname if interface.ifname is defined else 'iface' ~ index }}.network"
  vars:
    config: "{{ item.config }}"
    interface: "{{ item.interface }}"
    index: "{{ item.iface_index }}"
  loop: >-
      {%- set items = [] %}
      {%- for bridge in network_bridges %}
      {%-   for interface in bridge.interfaces|default([]) %}
      {%-     do items.append({ 'interface': interface, 'config': bridge, 'iface_index': loop.index0 }) %}
      {%-   endfor %}
      {%- endfor %}
      {{- items -}}
  when: network_bridges is defined

- name: "Networkd: Network: vlans"
  template:
    src: "networkd.network.j2"
    dest: "/etc/systemd/network/60-bridge-{{ config.bridge }}-vlan{{config.vlan}}-{{ config.name }}.network"
  vars:
    config: "{{ item }}"
    type: "vlan"
  loop: "{{ network_vlans }}"
  when: network_vlans is defined

- name: "Networkd: Network: bonds"
  template:
    src: "networkd.network.j2"
    dest: "/etc/systemd/network/60-bond-{{ config.name }}.network"
  vars:
    config: "{{ item }}"
    type: "bond"
  loop: "{{ network_bonds }}"
  when: network_bonds is defined

- name: "Networkd: Network: bridge"
  template:
    src: "networkd.network.j2"
    dest: "/etc/systemd/network/60-bridge-{{ config.name }}.network"
  vars:
    config: "{{ item }}"
    type: "bridge"
  loop: "{{ network_bridges }}"
  when: network_bridges is defined

- name: "Debug: fail here"
  fail:
    msg: "Intentionally fail"

- name: Find interfaces configuration
  find:
    paths: /etc/netplan
    file_type: file
    excludes:
      - "config.yaml"
  register: netplan_files

- name: Delete unused netplan configuration
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ netplan_files['files'] }}"

- name: "NetPlan: write configuration"
  template:
    src: netplan.conf.j2
    dest: /etc/netplan/config.yaml
    mode: "600"
  register: netplan

- name: "NetPlan: make sure /etc/networkd-dispatcher/configuring.d/ exists"
  file:
    path: /etc/networkd-dispatcher/configuring.d/
    state: directory
    mode: "755"

- name: "NetPlan: create pre-up hooks for setting port configuration"
  template:
    src: pre-up-hooks.j2
    dest: /etc/networkd-dispatcher/configuring.d/50-pre-up.sh
    mode: "755"
  register: networkd

- name: "NetPlan: ensure networkd-dispatcher is started"
  service:
    name: networkd-dispatcher
    state: started
    enabled: true

- name: "Sysctl: Neeeded parameters for FRR"
  copy:
    src: sysctl_99-frr.conf
    dest: /etc/sysctl.d/99-frr.conf
    mode: "660"
  notify: sysctl_restart

- name: "FRR: write configuration"
  template:
    backup: true
    src: frr.conf.j2
    dest: /etc/frr/frr.conf
    mode: "660"
  notify: frr_reload

- name: "Instruct networkd not to mess with our routes"
  community.general.ini_file:
    path: /etc/systemd/networkd.conf
    no_extra_spaces: true
    section: "{{ item.section }}"
    option: "{{ item.key }}"
    value: "{{ item.val }}"
  with_items:
    - section: "Network"
      key: "KeepConfiguration"
      val: "yes"
    - section: "Network"
      key: "ManageForeignNextHops"
      val: "no"
    - section: "Network"
      key: "ManageForeignRoutes"
      val: "no"
    - section: "Network"
      key: "ManageForeignRoutingPolicyRules"
      val: "no"
  notify: networkctl_reload

- name: "FRR: ensure enabled and started"
  service:
    name: frr
    state: started
    enabled: true

- name: "UFW: allow BGP unnumbered"
  community.general.ufw:
    rule: allow
    port: 179
    proto: tcp
    src: "fe80::/10"
    dest: "fe80::/10"

- name: "UFW: allow BFD"
  community.general.ufw:
    rule: allow
    port: 3784
    proto: udp
    src: "fe80::/10"
    dest: "fe80::/10"

- name: "UFW: allow VXLAN VTEP"
  community.general.ufw:
    rule: allow
    port: 4789
    proto: udp
    src: "{{ network_vtep_ip }}"
    dest: "{{ network_vtep_ip|split('/')|first }}/32"

- name: "UFW: ensure ufw is enabled and started"
  service:
    name: ufw
    state: started
    enabled: true

- name: "VXLAN configuration changed, rebooting...(one node at a time)"
  reboot:
    msg: "rebooting now"
    connect_timeout: 10
    post_reboot_delay: 60
  when: netplan.changed or networkd.changed
  throttle: 1

- name: Refresh facts
  ansible.builtin.setup:
    gather_subset:
      - network
  when: netplan.changed or networkd.changed

# We want to flush any handlers to make sure BGP comes online at this point as
# other roles may require connectivity provided.
- name: "Flush handlers"
  ansible.builtin.meta: flush_handlers
