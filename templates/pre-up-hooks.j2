#!/bin/bash
{% import 'macros/ip_funcs.j2' as ipfn %}
{% set bond_ifnames = network_bonds|default([]) | map(attribute='name') | list %}
{% set bridge_ifnames = network_bridges|default([]) | map(attribute='name') | list %}
case "$IFACE" in
{# ------ VXLAN UNDERLAY PHYSICAL INTERFACES ------ #}
{% for interface in network_underlay_interfaces|default([]) %}
{%   set ifnames = ipfn.resolve_ifnames(ansible_facts, interface, bond_ifnames + bridge_ifnames) | from_yaml %}
{%   for ifname in ifnames %}
{%     if ifname not in bond_ifnames + bridge_ifnames %}
    {{ ifname }})
      ethtool --set-fec {{ ifname }} encoding {{ interface.fec|default('auto' if interface.speed|default(0) >= 25000 else 'rs') }}
      ;;
{%     endif %}
{%   endfor %}
{% endfor %}
{# ------ BOND PHYSICAL ETHERNET INTERFACES ------ #}
{% for bond in network_bonds|default([]) %}
{%   for interface in bond.interfaces %}
{%     set ifnames = ipfn.resolve_ifnames(ansible_facts, interface.interfaces) | from_yaml %}
{%     for ifname in ifnames %}
    {{ ifname }})
      ethtool --set-fec {{ ifname }} encoding {{ interface.fec|default('auto' if interface.speed|default(0) >= 25000 else 'rs') }}
      ;;
{%     endfor %}
{%   endfor %}
{% endfor %}
{# ------ BRIDGE PHYSICAL ETHERNET INTERFACES ------ #}
{% for bridge in network_bridges|default([]) %}
{%   for interface in bridge.interfaces|default([]) %}
{%     set ifnames = ipfn.resolve_ifnames(ansible_facts, interface.interfaces) | from_yaml %}
{%     for ifname in ifnames %}
    {{ ifname }})
      ethtool --set-fec {{ ifname }} encoding {{ interface.fec|default('auto' if interface.speed|default(0) >= 25000 else 'rs') }}
      ;;
{%     endfor %}
{%   endfor %}
{% endfor %}
{# ------ PHYSICAL ETHERNET INTERFACES ------ #}
{% for interface in network_interfaces|default([]) %}
{%   set ifnames = ipfn.resolve_ifnames(ansible_facts, interface) | from_yaml %}
    {{ ifnames[0] }})
      ethtool --set-fec {{ ifnames[0] }} encoding {{ interface.fec|default('auto' if interface.speed|default(0) >= 25000 else 'rs') }}
      ;;
{% endfor %}
    *)
      ;;
esac

exit 0
