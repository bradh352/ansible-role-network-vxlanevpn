{% import 'macros/ip_funcs.j2' as ipfn %}
{# ----- Collect all known interface names from configuration ---- #}
{% set ether_ifnames = [] %}
{# Handle the possibility that the the configuration is renaming an interface #}
{% for interface in network_interfaces|default([]) %}
{%   if interface.name is not defined and interface.ifname is not defined %}
{{ notdefined | mandatory(msg='network_interfaces entry must have name if not using ifname') }}
{%   endif %}
{%   do ether_ifnames.append(interface.name|default(interface.ifname)) %}
{% endfor %}
{# ----- Validate underlay interface names ---- #}
BGP Unnumbered Underlay Interfaces:
{% for interface in network_underlay_interfaces|default([]) %}
{%   if interface.ifname is not defined and interface.macaddr is not defined and interface.driver is not defined and interface.pattern is not defined %}
{{ notdefined | mandatory(msg='network_underlay_interfaces[' ~ loop.index0 ~ '] must have ifname, macaddr, driver, or pattern specified') }}
{%   endif %}
{%   set ifnames = ipfn.resolve_ifnames('network_underlay_interfaces[' ~ loop.index0 ~ ']', ansible_facts, network_orig_iface_names, interface, extra_ifnames=network_bond_names + network_bridge_names + ether_ifnames + network_vlan_names) %}
  iface {{ loop.index }}: {{ ifnames }}
{% endfor %}
{# ----- Validate bond interface names ---- #}
Bond Interfaces:
{% for bond in network_bonds|default([]) %}
{%   set outer_index=loop.index0 %}
{%   for interface in bond.interfaces %}
{%     if interface.ifname is not defined and interface.macaddr is not defined and interface.driver is not defined and interface.pattern is not defined %}
{{ notdefined | mandatory(msg='network_bonds[' ~ outer_index ~ '] interface index ' ~ loop.index0 ~ ' must have ifname, macaddr, driver, or pattern specified') }}
{%     endif %}
{%     set ifnames = ipfn.resolve_ifnames('network_bonds[' ~ outer_index ~ '] interface index ' ~ loop.index0, ansible_facts, network_orig_iface_names, interface) %}
  {{ bond.name }}.{{ loop.index0 }}: {{ ifnames }}
{%   endfor %}
{% endfor %}
{# ----- Validate bridge interface names ---- #}
Bridge Interfaces:
{% for bridge in network_bridges|default([]) %}
{%   for interface in bridge.interfaces|default([]) %}
{%     set outer_index=loop.index0 %}
{%     if interface.ifname is not defined and interface.macaddr is not defined and interface.driver is not defined and interface.pattern is not defined %}
{{ notdefined | mandatory(msg='network_bridges[' ~ outer_index ~ '] interface index ' ~ loop.index0 ~ ' must have ifname, macaddr, driver, or pattern specified') }}
{%     endif %}
{%     set ifnames = ipfn.resolve_ifnames('network_bridges[' ~ outer_index ~ '] interface index ' ~ loop.index0, ansible_facts, network_orig_iface_names, interface, extra_ifnames=network_bond_names + network_vlan_names) %}
  {{ bridge.name }}.{{ loop.index0 }}: {{ ifnames }}
{%   endfor %}
{% endfor %}
{# ----- Validate ethernet interface names ---- #}
Ethernet Interfaces:
{% for interface in network_interfaces|default([]) %}
{# We can't guarantee the ifname exists if the user is renaming the interface, so turn off ifname validation #}
{%   if interface.ifname is not defined and interface.macaddr is not defined and interface.driver is not defined and interface.pattern is not defined %}
{{ notdefined | mandatory(msg='interfaces[' ~ loop.index0 ~ '] must have ifname, macaddr, driver, or pattern specified') }}
{%   endif %}
{%   set ifnames = ipfn.resolve_ifnames('interfaces[' ~ loop.index0 ~ ']', ansible_facts, network_orig_iface_names, interface, validate_ifname=false) %}
  {{ interface.name|default(interface.ifname) }}: {{ ifnames }}
{% endfor %}
{# ----- Validate vlan interface names ---- #}
VLAN Interfaces:
{% for interface in network_vlans|default([]) %}
{%   if interface.ifname not in ether_ifnames + network_bond_names + network_bridge_names + network_interface_names %}
{{ notdefined | mandatory(msg='vlan ' ~ interface.name ~ 'id ' ~ interface.vlan ~ 'master ' ~ interface.ifname ~ ' does not exist') }}
{%   endif %}
  {{ interface.name }}: {{ interface.ifname }}
{% endfor %}
